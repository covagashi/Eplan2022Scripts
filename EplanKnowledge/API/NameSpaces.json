[
  {    
    "namespace": "Eplan.EplApi.ApplicationFramework",
    "description": "Contains core classes and interfaces for EPLAN application development.",
    "members": [
      {
        "type": "class",
        "name": "Action",
        "description": "Represents an executable action in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class Action",
          "cpp": "public ref class Action"
        },
        "remarks": "Core class for creating custom actions in EPLAN."
      },
      {
        "type": "class",
        "name": "ActionCallingContext",
        "description": "Provides context for calling actions in EPLAN.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.Base.Context",
          "Eplan.EplApi.ApplicationFramework.ActionCallingContext",
          "Eplan.EplApi.DataModel.StorableObjectContext"
        ],
        "interfaces": [
          "IActionCallingContext",
          "Eplan.EplApi.Base.IContext"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionCallingContext : Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext",
          "cpp": "public ref class ActionCallingContext : public Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext"
        }
      },
      {
        "type": "class",
        "name": "ActionManager",
        "description": "Manages available actions in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionManager",
          "cpp": "public ref class ActionManager"
        },
        "codeExample": {
          "csharp": "Action oAction = m_ActionManager.FindAction(null);\nAssert.IsNull(oAction);\nActionCallingContext oACC = new ActionCallingContext();\noAction.Execute(oACC);"
        }
      },
      {
        "type": "class",
        "name": "ActionParameterProperties",
        "description": "Defines properties for action parameters.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionParameterProperties",
          "cpp": "public ref class ActionParameterProperties"
        },
        "codeExample": {
          "csharp": "ActionManager oMng = new ActionManager();\nAction oAction = oMng.FindAction(m_strActionName);\nlabelDescription.Text = oAction.ActionProperties.Description;\n\nArrayList lst = oAction.ActionProperties.GetParameterProperties();\nif (lst.Count == 0)\n{\n   listViewParameter.Hide();\n}\nelse\n{\n   foreach (ActionParameterProperties oProperties in lst)\n   {\n        String strParamName         = oProperties.Name;\n        String strParamDescription  = oProperties.Description;\n\n        System.Windows.Forms.ListViewItem listItem = new System.Windows.Forms.ListViewItem(strParamName);\n        listItem.SubItems.Add(strParamDescription);\n\n        listViewParameter.Items.Add(listItem);\n    }\n    listViewParameter.Show();\n}"
        }
      },
      {
        "type": "class",
        "name": "ActionProperties",
        "description": "Encapsulates properties of an EPLAN action.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionProperties",
          "cpp": "public ref class ActionProperties"
        }
      },
      {
        "type": "class",
        "name": "BatchActionManager",
        "description": "Manages batch execution of actions in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class BatchActionManager",
          "cpp": "public ref class BatchActionManager"
        }
      },
      {
        "type": "class",
        "name": "CommandLineInterpreter",
        "description": "Interprets and executes command line commands in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "ICommandLineInterpreter"
        ],
        "attributes": [
          {
            "name": "ClassInterface",
            "value": "ClassInterfaceType.None"
          }
        ],
        "codeDeclaration": {
          "csharp": "public class CommandLineInterpreter : ICommandLineInterpreter",
          "cpp": "public ref class CommandLineInterpreter : public ICommandLineInterpreter"
        },
        "codeExample": {
          "csharp": "String strAction = @\"XPrjActionProjectOpen /PROJECT:\";\nbool bRet = new CommandLineInterpreter().Execute(strAction + ProjectName);\nif (!bRet)\n{\n   new Decider().Decide(EnumDecisionType.eOkDecision, \"P8 command does not work\", \"OpenProjectAndPage\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n   CommandLineInterpreter.Execute(\"SystemErrDialog\");\n   return -1;\n}"
        }
      },
      {
        "type": "class",
        "name": "EventHandler",
        "description": "Handles events in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "attributes": [
          {
            "name": "ComSourceInterfaces",
            "value": "Eplan.EplApi.ApplicationFramework.IEplanEvents"
          }
        ],
        "codeDeclaration": {
          "csharp": "public class EventHandler",
          "cpp": "public ref class EventHandler"
        }
      },
      {
        "type": "class",
        "name": "EventHandlerWrapper",
        "description": "Wraps event handling functionality in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class EventHandlerWrapper",
          "cpp": "public ref class EventHandlerWrapper"
        },
        "codeExample": {
          "csharp": "Eplan.EplApi.ApplicationFramework.EventHandler oEventHandler = new Eplan.EplApi.ApplicationFramework.EventHandler();\noEventHandler.SetEvent(\"onActionStart.String.*\");\n       \nEplan.EplApi.ApplicationFramework.EventHandlerWrapper oWrapper = new Eplan.EplApi.ApplicationFramework.EventHandlerWrapper();\noWrapper.EplanEventLocally += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper_EventHandlerFunctionLocally);\n          \noEventHandler.EplanEvent += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper.LocallyEventHandlerFunction);"
        }
      },
      {
        "type": "class",
        "name": "EventManager",
        "description": "Manages events in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class EventManager",
          "cpp": "public ref class EventManager"
        }
      },
      {
        "type": "class",
        "name": "EventParameter",
        "description": "Represents parameters for EPLAN events.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "IEventParameter"
        ],
        "codeDeclaration": {
          "csharp": "public class EventParameter : IEventParameter",
          "cpp": "public ref class EventParameter : public IEventParameter"
        }
      },
      {
        "type": "class",
        "name": "EventParameterString",
        "description": "Represents string parameters for EPLAN events.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "IEventParameter"
        ],
        "codeDeclaration": {
          "csharp": "public class EventParameterString : IEventParameter",
          "cpp": "public ref class EventParameterString : public IEventParameter"
        }
      },
      {
        "type": "class",
        "name": "License",
        "description": "Handles licensing in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class License",
          "cpp": "public ref class License"
        }
      },
      {
        "type": "class",
        "name": "QuietModeStep",
        "description": "Manages quiet mode steps in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class QuietModeStep",
          "cpp": "public ref class QuietModeStep"
        }
      },
      {
        "type": "class",
        "name": "UserRights",
        "description": "Manages user rights in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class UserRights",
          "cpp": "public ref class UserRights"
        }
      },
      {
        "type": "enum",
        "name": "LicenseOptions",
        "description": "Enumerates license options in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum LicenseOptions : System.Enum",
          "cpp": "public enum class LicenseOptions : public System.Enum"
        }
      },
      {
        "type": "enum",
        "name": "LicenseType",
        "description": "Enumerates license types in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum LicenseType : System.Enum",
          "cpp": "public enum class LicenseType : public System.Enum"
        }
      },
      {
        "type": "enum",
        "name": "ProjectOpenRequirement",
        "description": "Enumerates project open requirements in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum ProjectOpenRequirement : System.Enum",
          "cpp": "public enum class ProjectOpenRequirement : public System.Enum"
        },
        "codeExample": {
          "csharp": "public ProjectOpenRequirement GetProjectRequirement()\n{\n    return ProjectOpenRequirement.ProjectExclusive;\n}"
        }
      },
      {
        "type": "enum",
        "name": "QuietModes",
        "description": "Enumerates quiet modes in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum QuietModes : System.Enum",
          "cpp": "public enum class QuietModes : public System.Enum"
        }
      },
      {
        "type": "interface",
        "name": "IActionCallingContext",
        "description": "Interface for action calling context in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IActionCallingContext",
          "cpp": "public interface class IActionCallingContext"
        }
      },
      {
        "type": "interface",
        "name": "ICommandLineInterpreter",
        "description": "Interface for command line interpreter in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface ICommandLineInterpreter",
          "cpp": "public interface class ICommandLineInterpreter"
        }
      },
      {
        "type": "interface",
        "name": "IEplAction",
        "description": "Interface for EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplAction",
          "cpp": "public interface class IEplAction"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionBatchExtension",
        "description": "Interface for EPLAN action batch extensions.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IEplActionBatchExtension : IInterface",
          "cpp": "public interface class IEplActionBatchExtension : public IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionChecked",
        "description": "Interface for checked EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplActionChecked",
          "cpp": "public interface class IEplActionChecked"
        },
        "codeExample": {
          "csharp": "public class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionChecked\n{\n    public int Checked(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n    {\n        if (strActionName == \"TESTACTIONMIXED\")\n        {\n            return 2;\n        }\n        else if (strActionName == \"TESTACTION\")\n        {\n            return 1;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionEnable",
        "description": "Interface for enabling EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplActionEnable",
          "cpp": "public interface class IEplActionEnable"
        },
        "codeExample": {
          "csharp": "public class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionEnable\n{\n    public bool Enabled(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n    {\n        if (strActionName == \"TESTACTION\")\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplAddIn",
        "description": "Interface for EPLAN add-ins.",
        "codeDeclaration": {
          "csharp": "public interface IEplAddIn",
          "cpp": "public interface class IEplAddIn"
        }
      },
      {
        "type": "interface",
        "name": "IEplAddInShadowCopy",
        "description": "Interface for EPLAN add-ins with shadow copy support.",
        "codeDeclaration": {
          "csharp": "public interface IEplAddInShadowCopy",
          "cpp": "public interface class IEplAddInShadowCopy"
        },
        "codeExample": {
          "csharp": "public class AddInModule: IEplAddIn, IEplAddInShadowCopy\n{\n    public bool OnRegister(ref System.Boolean bLoadOnStart)\n    {\n        bLoadOnStart = true;\n        return true;\n    }\n\n    public bool OnUnregister()\n    {\n        return true;\n    }\n\n    public void OnBeforeInit(string strOriginalAssemblyPath)\n    {\n        m_strOriginalAssemblyPath = strOriginalAssemblyPath;\n    }\n\n    public String GetOriginalAssemblyPath()\n    {\n        return m_strOriginalAssemblyPath;\n    }\n\n    public bool OnInit()\n    {\n        return true;\n    }\n\n    public bool OnInitGui()\n    {\n        return true;\n    }\n\n    public bool OnExit()\n    {\n        return true;\n    }\n\n    private String m_strOriginalAssemblyPath;\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplanEvents",
        "description": "Interface for EPLAN events.",
        "attributes": [
          {
            "name": "InterfaceType",
            "value": "ComInterfaceType.InterfaceIsIDispatch"
          }
        ],
        "codeDeclaration": {
          "csharp": "public interface IEplanEvents",
          "cpp": "public interface class IEplanEvents"
        }
      },
      {
        "type": "interface",
        "name": "IEplanEventsWrapper",
        "description": "Interface for wrapping EPLAN events.",
        "codeDeclaration": {
          "csharp": "public interface IEplanEventsWrapper",
          "cpp": "public interface class IEplanEventsWrapper"
        }
      },
      {
        "type": "interface",
        "name": "IEventParameter",
        "description": "Interface for event parameters in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IEventParameter",
          "cpp": "public interface class IEventParameter"
        }
      },
      {
        "type": "interface",
        "name": "IExtendedProcessor",
        "description": "Interface for extended processors in EPLAN.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IExtendedProcessor : IInterface",
          "cpp": "public interface class IExtendedProcessor : public IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IInterface",
        "description": "Base interface for EPLAN interfaces.",
        "codeDeclaration": {
          "csharp": "public interface IInterface",
          "cpp": "public interface class IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IOptions",
        "description": "Interface for options in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IOptions",
          "cpp": "public interface class IOptions"
        }
      },
      {
        "type": "interface",
        "name": "IXMLProcessor",
        "description": "Interface for XML processors in EPLAN.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IXMLProcessor : IInterface",
          "cpp": "public interface class IXMLProcessor : public IInterface"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerFunction",
        "description": "Delegate for event handler functions in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate void EventHandlerFunction(IEventParameter pIEventParameter)",
          "cpp": "public delegate void EventHandlerFunction(IEventParameter^ pIEventParameter)"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerNameFunction",
        "description": "Delegate for named event handler functions in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate void EventHandlerNameFunction(IEventParameter pIEventParameter, string strNameOfEvent)",
          "cpp": "public delegate void EventHandlerNameFunction(IEventParameter^ pIEventParameter, String^ strNameOfEvent)"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerNameFunctionResult",
        "description": "Delegate for named event handler functions with a result in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate long EventHandlerNameFunctionResult(IEventParameter pIEventParameter, string strNameOfEvent)",
          "cpp": "public delegate int64 EventHandlerNameFunctionResult(IEventParameter^ pIEventParameter, String^ strNameOfEvent)"
        },
        "returnValue": {
          "type": "long",
          "description": "The result of the event handler function."
        }
      }
    ]
  },
  {
    "namespace": "Eplan.EplApi.Gui",
    "classes": [
      {
        "name": "ContextMenu",
        "description": "Represents a context menu in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeExample": "ContextMenuLocation oLocation = new ContextMenuLocation();\noLocation.DialogName = \"Editor\";\noLocation.ContextMenuName = \"Ged\";\nContextMenu oTestMenu = new ContextMenu();\noTestMenu.AddMenuItem(oLocation, \"My Contextmenuname\", \"MyFavoriteActionName\", true, false);"
      },
      {
        "name": "RibbonBar",
        "description": "Represents a ribbon bar in EPLAN GUI.",
        "inheritance": [
          "System.Object"
        ],
        "codeExamples": [
          {
            "description": "Adding a new tab and commands",
            "code": "using (var ribbonBar = new RibbonBar(true))\n{\n    var ribbonTab = ribbonBar.AddTab(\"MyTab1\") ?? ribbonBar.GetTab(\"MyTab1\");\n    var commandGroup = ribbonTab.AddCommandGroup(\"MyExampleActions\");\n    commandGroup.AddCommand(\"MyExampleAction1\", \"ExampleAction /PARAM:1\");\n    commandGroup.AddCommand(\"MyExampleAction2\", \"ExampleAction /PARAM:2\");\n    commandGroup.AddCommand(\"MyExampleAction3\", \"ExampleAction /PARAM:3\");\n}"
          },
          {
            "description": "Adding a new command with an icon",
            "code": "RibbonBar ribbonBar = new RibbonBar();\nribbonBar.AddCommand(\"New ribbon button text\", \"XPartsManagementStart\", new RibbonIcon(CommandIcon.Circle_0));"
          }
        ]
      }
    ],
    "enums": [
      {
        "name": "CommandIcon",
        "description": "Enumerates icons available for commands in EPLAN GUI.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "name": "RibbonTab.DefaultRibbonTabs",
        "description": "Enumerates default ribbon tabs in EPLAN.",
        "inheritance": [
          "System.Enum"
        ]
      }
    ]
  },
  {
    "namespace": "Eplan.EplApi.Scripting",
    "attributes": [
      {
        "name": "DeclareAction",
        "description": "Attribute used to declare an action in EPLAN scripting.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      },
      {
        "name": "DeclareEventHandler",
        "description": "Attribute used to declare an event handler in EPLAN scripting.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      },
      {
        "name": "Start",
        "description": "Attribute used to mark the starting point of an EPLAN script.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      }
    ]
  },
  {
    "namespace": "Eplan.IdentityClient.Authentification",
    "classes": [
      {
        "name": "ProductInfo",
        "description": "Provides information about the EPLAN product.",
        "attributes": [
          "NullableContext(1)",
          "Nullable(0)"
        ]
      }
    ],
    "interfaces": [
      {
        "name": "IEIdentityClient",
        "description": "Interface for EPLAN identity client operations.",
        "attributes": [
          "NullableContext(1)"
        ]
      }
    ]
  },
  {
    "namespace": "Eplan.IdentityClient",
    "classes": [
      {
        "name": "AuthenticationData",
        "description": "Represents authentication data in EPLAN identity client.",
        "inheritance": [
          "IdentityClientResponse"
        ]
      },
      {
        "name": "EProxySettings",
        "description": "Manages proxy settings for EPLAN identity client."
      }
    ],
    "enums": [
      {
        "name": "ApplicationMode",
        "description": "Enumerates application modes in EPLAN identity client.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "name": "IdentityStatusCode",
        "description": "Enumerates status codes for identity operations in EPLAN.",
        "inheritance": [
          "System.Enum"
        ]
      }
    ]
  }
]